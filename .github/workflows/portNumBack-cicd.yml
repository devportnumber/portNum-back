name: CI-CD PortNumber Back-End Service

on:
  push:
    branches:
      - BE/ys

jobs:
  deploy:
    runs-on: ubuntu-latest

  env:
    AWS_REGION: ap-northeast-2
    ECS_CLUSTER_NAME: portNumber-backEnd
    ECR_REPOSITORY_NAME: portnum-backend
    ECS_SERVICE_NAME: portNumber-backEnd-dev
    ECS_CONTAINER_NAME: portnum-backend
    TASK_DEFINITION_NAME: portNumber-backEnd

  steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials For Devzone
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.SECRET_KEY }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-

    - name: Install JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x ./src/gradlew

    - name: Create application.yml
      run: |
        echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml

    - name: Project build
      env:
        jasypt.encryptor.password: ${{ secrets.JASYPT_PASSWORD }}
      working-directory: ./src
      run: ./gradlew clean build -x test
      shell: bash

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        SERVICE_TAG: . # Dockerfile의 경로
        IMAGE_TAG: latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG $SERVICE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG"

    - name: Deploy to ECS
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment 
